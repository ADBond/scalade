(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))a(n);new MutationObserver(n=>{for(const s of n)if(s.type==="childList")for(const o of s.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&a(o)}).observe(document,{childList:!0,subtree:!0});function e(n){const s={};return n.integrity&&(s.integrity=n.integrity),n.referrerPolicy&&(s.referrerPolicy=n.referrerPolicy),n.crossOrigin==="use-credentials"?s.credentials="include":n.crossOrigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function a(n){if(n.ep)return;n.ep=!0;const s=e(n);fetch(n.href,s)}})();class h{constructor(t,e,a,n){this.name=t,this.trickTakingRank=e,this.score=a,this.ttRankAbove=n}toString(){return this.name}toStringShort(){return this.name[0]}static rankEquals(t,e){return t.name==e.name}}class p{constructor(t,e){this.name=t,this.rankForTrumpPreference=e}toString(){return this.name}toStringShort(){return this.name[0]}static suitEquals(t,e){return t.name==e.name}}class E{constructor(t,e){this.suit=t,this.rank=e}toString(){return`${this.rank.toString()} of ${this.suit.toString()}`}toStringShort(){return`${this.rank.toStringShort()}${this.suit.toStringShort()}`}static cardEquals(t,e){return h.rankEquals(t.rank,e.rank)&&p.suitEquals(t.suit,e.suit)}}const w=[...Array.from({length:9},(r,t)=>{const e=t+2;return new h(e!==10?String(e):"T",e,e,e+1)}),new h("J",11,12,12),new h("Q",12,15,13),new h("K",13,18,14),new h("A",14,1,4)],I=[new p("Diamonds",0),new p("Hearts",1),new p("Spades",2),new p("Clubs",3)];class g{constructor(t=4){this.minRank=t,this.cards=[],this.cards=this.getFullPack()}getFullPack(){const t=[];for(const e of I)for(const a of w){if(a.trickTakingRank<this.minRank)continue;let n=new E(e,a);a.name=="A"&&(n.rank.ttRankAbove=this.minRank),t.push(n)}return t}getCard(t){for(const e of this.getFullPack())if(e.toStringShort()==t)return e;throw new Error(`Failed to locate card: ${t}`)}static shuffle(t){for(let e=t.length-1;e>0;e--){const a=Math.floor(Math.random()*(e+1));[t[e],t[a]]=[t[a],t[e]]}}isEmpty(){return this.cards.length===0}filterOut(t){return this.cards.filter(a=>!t.some(n=>E.cardEquals(a,n)))}get count(){return this.cards.length}}class x{constructor(t,e,a,n,s){this.displayName=t,this.name=e,this.hand=a}}const T={chooseMove:(r,t)=>{const e=Math.floor(Math.random()*t.length);return t[e]}};class b{constructor(t){this.playerNames=t,this.players=[],this.pack=new g,this.cardsPerHand=12,this.trickInProgress=[],this.ladders=this.getStartingLadders(),this.trumpSuit=null,this.currentState="initialiseGame";const e=["player","comp1","comp2"],a=["human",T,T];this.players=t.map((n,s)=>new x(n,e[s],[],0,a[s]));for(const n of t)this.players.push();this.dealerIndex=0,this.currentPlayerIndex=0,this.trickIndex=0,this.trickWinnerPlayerIndex=-1,this.finalTrickWinnerIndex=-1}increment(){switch(this.currentState){case"initialiseGame":this.dealCards(this.pack),this.currentState="playCard";break;case"playCard":break;case"trickComplete":this.resetTrick();break}}getStartingLadders(){return["5D","6H","7S","8C"].map(t=>[this.pack.getCard(t),null])}get ladderCards(){return this.ladders.map(([t,e])=>t)}trumpSuitFromLadders(){const t=this.ladderCards,e=Math.min(...t.map(o=>o.rank.trickTakingRank)),a=t.filter(o=>o.rank.trickTakingRank==e);if(a.length==1)return a[0].suit;const n=Math.max(...t.map(o=>o.suit.rankForTrumpPreference)),s=t.filter(o=>o.suit.rankForTrumpPreference==n);if(s.length==1)return s[0].suit;throw new Error("Error determining trump suit")}updateLadders(){}get isPenultimateTrick(){return this.trickIndex==this.cardsPerHand-2}get isFinalTrick(){return this.trickIndex==this.cardsPerHand-1}resetTrick(){const t=this.trickWinnerPlayerIndex;this.currentPlayerIndex=t,this.updateLadders(),this.isFinalTrick&&(this.finalTrickWinnerIndex=t),this.trickInProgress=[],this.trickIndex++}dealCards(t,e=12){const a=this.pack.filterOut(this.ladderCards);g.shuffle(a);for(let n=0;n<e;n++)for(let s=0;s<3;s++){const o=a.pop();o&&this.giveCardToPlayer(s,o)}this.trumpSuit=this.trumpSuitFromLadders()}giveCardToPlayer(t,e){this.players[t].hand.push(e)}getPlayerHand(t){return this.players[t].hand??[]}playCard(t,e){const a=this.getPlayerHand(t);if(!a)return!1;const n=a.findIndex(s=>s.rank===e.rank&&s.suit===e.suit);if(n>=0){const[s]=a.splice(n,1);return!0}return!1}getStateForUI(){return{hands:{comp1:this.getPlayerHand(1),player:this.getPlayerHand(0),comp2:this.getPlayerHand(2)},trumps:this.trumpSuit,played:{comp1:null,player:null,comp2:null},previous:{comp1:null,player:null,comp2:null},ladder:{comp1:[],player:[],comp2:[],neutral:this.ladders.filter(([t,e])=>e===null).map(([t,e])=>t)},scores:{comp1:0,player:0,comp2:0},scores_previous:{comp1:0,player:0,comp2:0},score_details:{},holding_bonus:{comp1:{},player:{},comp2:{}},dead:[],penultimate:[],escalations:-1,hand_number:-1,advance:"C",game_state:"play_card",whose_turn:"human"}}}class H{constructor(t){this.pack=new g,this.state=new b(t),this.state.increment()}getGameState(){return this.state}getGameStateForUI(){return this.state.getStateForUI()}playCard(t,e){return!0}}const L={2:0,3:1,4:2,5:3,6:4,7:5,8:6,9:7,T:8,J:9,Q:10,K:11,A:12},C={S:0,H:1,C:2,D:3},_=72,$=96;function u(r,t){const e=document.createElement("span");e.className="card";const a=r.match(/^([0-9TJQKA])([SHDC])$/);if(a){const[,n,s]=a,o=L[n],i=C[s];e.style.backgroundPosition=`-${o*_}px -${i*$}px`}else e.innerText=r,e.style.background="#ccc";return t&&(e.onclick=()=>t(r)),e}function m(r){const t=document.createElement("span");t.className="suit-icon";const e=r.match(/^([SHDC])$/),a=32;if(e){const[,n]=e,s=C[n];t.style.backgroundPosition=`32px -${s*a}px`}else t.innerText="",t.style.background="#ccc";return t}function y(r){console.log(r);const t=document.getElementById("player-hand"),e=r.hands.player;e.sort((i,c)=>100*(i.suit.rankForTrumpPreference-c.suit.rankForTrumpPreference)+(i.rank.trickTakingRank-c.rank.trickTakingRank)),t.innerHTML="",e.forEach(i=>{t.appendChild(u(i.toStringShort(),M))}),["player","comp1","comp2"].forEach(i=>{const c=document.getElementById(`played-${i}`);c.innerHTML="";const d=r.played[i];if(d){const l=u(d.toStringShort());l.classList.add("played-card"),c.appendChild(l)}}),["player","comp1","comp2"].forEach(i=>{const c=document.getElementById(`prev-${i}`);c.innerHTML="";const d=r.previous[i];if(d){const l=u(d.toStringShort());l.classList.add("played-card"),c.appendChild(l)}}),["player","comp1","comp2"].forEach(i=>{const c=document.getElementById(`hb-${i}`);c.innerHTML="";const d=r.holding_bonus[i];for(const[l,P]of Object.entries(d))for(let k=0;k<P;k++){const S=m(l);S.classList.add("holding-bonus-icon"),c.appendChild(S)}}),["neutral","player","comp1","comp2"].forEach(i=>{const c=document.getElementById(`ladder-${i}`);c.innerHTML="",r.ladder[i].forEach(d=>{c.appendChild(u(d.toStringShort()))})});const a=document.getElementById("penultimate-display"),n=document.getElementById("dead-display");a.innerHTML="",n.innerHTML="",r.penultimate.forEach(i=>a.appendChild(u(i.toStringShort()))),r.dead.forEach(i=>n.appendChild(u(i.toStringShort()))),document.getElementById("scores").innerText=`You: ${r.scores.player}, comp 1: ${r.scores.comp1}, comp 2: ${r.scores.comp2}`,document.getElementById("scores-previous").innerText=`prev: (You: ${r.scores_previous.player}, comp 1: ${r.scores_previous.comp1}, comp 2: ${r.scores_previous.comp2})`,document.getElementById("escalations").innerText=`Escalations: ${r.escalations} (hand #${r.hand_number})`;const s=document.getElementById("trumps");s.innerHTML="",s.appendChild(m(r.trumps?r.trumps.toStringShort():""));const o=document.getElementById("advance");switch(o.innerHTML="",o.appendChild(m(r.advance)),r.game_state){case"play_card":if(r.whose_turn==="human")break;f(700);break;case"trick_complete":f(1700);break;case"hand_complete":f(3e3);break}}async function f(r){await v(r),R()}function v(r){return new Promise(t=>setTimeout(t,r))}async function F(r){document.getElementById("player-hand").appendChild(u("4D"));const e=r.getGameStateForUI();y(e)}async function M(r){const e=await(await fetch("/play_card",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({card:r})})).json();y(e)}async function R(){const t=await(await fetch("/increment_state",{method:"POST"})).json();y(t)}window.onload=()=>{const r=new H(["Andy","Randy1","Randy2"]);F(r)};
