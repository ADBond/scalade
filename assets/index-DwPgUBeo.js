(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const r of document.querySelectorAll('link[rel="modulepreload"]'))a(r);new MutationObserver(r=>{for(const s of r)if(s.type==="childList")for(const i of s.addedNodes)i.tagName==="LINK"&&i.rel==="modulepreload"&&a(i)}).observe(document,{childList:!0,subtree:!0});function e(r){const s={};return r.integrity&&(s.integrity=r.integrity),r.referrerPolicy&&(s.referrerPolicy=r.referrerPolicy),r.crossOrigin==="use-credentials"?s.credentials="include":r.crossOrigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function a(r){if(r.ep)return;r.ep=!0;const s=e(r);fetch(r.href,s)}})();class p{constructor(t,e,a,r){this.name=t,this.trickTakingRank=e,this.score=a,this.ttRankAbove=r}toString(){return this.name}toStringShort(){return this.name[0]}static rankEquals(t,e){return t.name==e.name}}class m{constructor(t,e){this.name=t,this.rankForTrumpPreference=e}toString(){return this.name}toStringShort(){return this.name[0]}static suitEquals(t,e){return t.name==e.name}}class E{constructor(t,e){this.suit=t,this.rank=e}toString(){return`${this.rank.toString()} of ${this.suit.toString()}`}toStringShort(){return`${this.rank.toStringShort()}${this.suit.toStringShort()}`}static cardEquals(t,e){return p.rankEquals(t.rank,e.rank)&&m.suitEquals(t.suit,e.suit)}}const P=[...Array.from({length:9},(n,t)=>{const e=t+2;return new p(e!==10?String(e):"T",e,e,e+1)}),new p("J",11,12,12),new p("Q",12,15,13),new p("K",13,18,14),new p("A",14,1,4)],b=[new m("Diamonds",0),new m("Hearts",1),new m("Spades",2),new m("Clubs",3)];class g{constructor(t=4){this.minRank=t,this.cards=[],this.cards=this.getFullPack()}getFullPack(){const t=[];for(const e of b)for(const a of P){if(a.trickTakingRank<this.minRank)continue;let r=new E(e,a);a.name=="A"&&(r.rank.ttRankAbove=this.minRank),t.push(r)}return t}getCard(t){for(const e of this.getFullPack())if(e.toStringShort()==t)return e;throw new Error(`Failed to locate card: ${t}`)}static shuffle(t){for(let e=t.length-1;e>0;e--){const a=Math.floor(Math.random()*(e+1));[t[e],t[a]]=[t[a],t[e]]}}isEmpty(){return this.cards.length===0}filterOut(t){return this.cards.filter(a=>!t.some(r=>E.cardEquals(a,r)))}get count(){return this.cards.length}}class I{constructor(t,e,a,r,s){this.displayName=t,this.name=e,this.hand=a}}const C={chooseMove:(n,t)=>{const e=Math.floor(Math.random()*t.length);return t[e]}};class H{constructor(t){this.playerNames=t,this.players=[],this.pack=new g,this.ladders=this.getStartingLadders(),this.trumpSuit=null,this.currentState="initialiseGame";const e=["player","comp1","comp2"],a=["human",C,C];this.players=t.map((r,s)=>new I(r,e[s],[],0,a[s]));for(const r of t)this.players.push();this.dealerIndex=0,this.currentPlayerIndex=0}getStartingLadders(){return["5D","6H","7S","8C"].map(t=>[this.pack.getCard(t),null])}get ladderCards(){return this.ladders.map(([t,e])=>t)}trumpSuitFromLadders(){const t=this.ladderCards,e=Math.min(...t.map(i=>i.rank.trickTakingRank)),a=t.filter(i=>i.rank.trickTakingRank==e);if(a.length==1)return a[0].suit;const r=Math.max(...t.map(i=>i.suit.rankForTrumpPreference)),s=t.filter(i=>i.suit.rankForTrumpPreference==r);if(s.length==1)return s[0].suit;throw new Error("Error determining trump suit")}giveCardToPlayer(t,e){this.players[t].hand.push(e)}getPlayerHand(t){return this.players[t].hand??[]}playCard(t,e){const a=this.getPlayerHand(t);if(!a)return!1;const r=a.findIndex(s=>s.rank===e.rank&&s.suit===e.suit);if(r>=0){const[s]=a.splice(r,1);return!0}return!1}getStateForUI(){return{hands:{comp1:this.getPlayerHand(1),player:this.getPlayerHand(0),comp2:this.getPlayerHand(2)},trumps:this.trumpSuit,played:{comp1:null,player:null,comp2:null},previous:{comp1:null,player:null,comp2:null},ladder:{comp1:[],player:[],comp2:[],neutral:this.ladders.filter(([t,e])=>e===null).map(([t,e])=>t)},scores:{comp1:0,player:0,comp2:0},scores_previous:{comp1:0,player:0,comp2:0},score_details:{},holding_bonus:{comp1:{},player:{},comp2:{}},dead:[],penultimate:[],escalations:-1,hand_number:-1,advance:"C",game_state:"play_card",whose_turn:"human"}}}class _{constructor(t){this.pack=new g,this.state=new H(t),this.increment()}increment(){switch(this.state.currentState){case"initialiseGame":this.dealCards(),this.state.currentState="playCard";break}}dealCards(t=12){const e=this.pack.filterOut(this.state.ladderCards);g.shuffle(e);for(let a=0;a<t;a++)for(let r=0;r<3;r++){const s=e.pop();s&&this.state.giveCardToPlayer(r,s)}this.state.trumpSuit=this.state.trumpSuitFromLadders()}getGameState(){return this.state}getGameStateForUI(){return this.state.getStateForUI()}playCard(t,e){return!0}}const $={2:0,3:1,4:2,5:3,6:4,7:5,8:6,9:7,T:8,J:9,Q:10,K:11,A:12},w={S:0,H:1,C:2,D:3},v=72,L=96;function u(n,t){const e=document.createElement("span");e.className="card";const a=n.match(/^([0-9TJQKA])([SHDC])$/);if(a){const[,r,s]=a,i=$[r],o=w[s];e.style.backgroundPosition=`-${i*v}px -${o*L}px`}else e.innerText=n,e.style.background="#ccc";return t&&(e.onclick=()=>t(n)),e}function h(n){const t=document.createElement("span");t.className="suit-icon";const e=n.match(/^([SHDC])$/),a=32;if(e){const[,r]=e,s=w[r];t.style.backgroundPosition=`32px -${s*a}px`}else t.innerText="",t.style.background="#ccc";return t}function y(n){console.log(n);const t=document.getElementById("player-hand"),e=n.hands.player;e.sort((o,c)=>100*(o.suit.rankForTrumpPreference-c.suit.rankForTrumpPreference)+(o.rank.trickTakingRank-c.rank.trickTakingRank)),t.innerHTML="",e.forEach(o=>{t.appendChild(u(o.toStringShort(),R))}),["player","comp1","comp2"].forEach(o=>{const c=document.getElementById(`played-${o}`);c.innerHTML="";const l=n.played[o];if(l){const d=u(l.toStringShort());d.classList.add("played-card"),c.appendChild(d)}}),["player","comp1","comp2"].forEach(o=>{const c=document.getElementById(`prev-${o}`);c.innerHTML="";const l=n.previous[o];if(l){const d=u(l.toStringShort());d.classList.add("played-card"),c.appendChild(d)}}),["player","comp1","comp2"].forEach(o=>{const c=document.getElementById(`hb-${o}`);c.innerHTML="";const l=n.holding_bonus[o];for(const[d,T]of Object.entries(l))for(let S=0;S<T;S++){const k=h(d);k.classList.add("holding-bonus-icon"),c.appendChild(k)}}),["neutral","player","comp1","comp2"].forEach(o=>{const c=document.getElementById(`ladder-${o}`);c.innerHTML="",n.ladder[o].forEach(l=>{c.appendChild(u(l.toStringShort()))})});const a=document.getElementById("penultimate-display"),r=document.getElementById("dead-display");a.innerHTML="",r.innerHTML="",n.penultimate.forEach(o=>a.appendChild(u(o.toStringShort()))),n.dead.forEach(o=>r.appendChild(u(o.toStringShort()))),document.getElementById("scores").innerText=`You: ${n.scores.player}, comp 1: ${n.scores.comp1}, comp 2: ${n.scores.comp2}`,document.getElementById("scores-previous").innerText=`prev: (You: ${n.scores_previous.player}, comp 1: ${n.scores_previous.comp1}, comp 2: ${n.scores_previous.comp2})`,document.getElementById("escalations").innerText=`Escalations: ${n.escalations} (hand #${n.hand_number})`;const s=document.getElementById("trumps");s.innerHTML="",s.appendChild(h(n.trumps?n.trumps.toStringShort():""));const i=document.getElementById("advance");switch(i.innerHTML="",i.appendChild(h(n.advance)),n.game_state){case"play_card":if(n.whose_turn==="human")break;f(700);break;case"trick_complete":f(1700);break;case"hand_complete":f(3e3);break}}async function f(n){await x(n),F()}function x(n){return new Promise(t=>setTimeout(t,n))}async function M(n){document.getElementById("player-hand").appendChild(u("4D"));const e=n.getGameStateForUI();y(e)}async function R(n){const e=await(await fetch("/play_card",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({card:n})})).json();y(e)}async function F(){const t=await(await fetch("/increment_state",{method:"POST"})).json();y(t)}window.onload=()=>{const n=new _(["Andy","Randy1","Randy2"]);M(n)};
